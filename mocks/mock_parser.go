// Code generated by MockGen. DO NOT EDIT.
// Source: parser/parser.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	x "github.com/mihaichiorean/monidog/parser"
)

// MockLog is a mock of Log interface
type MockLog struct {
	ctrl     *gomock.Controller
	recorder *MockLogMockRecorder
}

// MockLogMockRecorder is the mock recorder for MockLog
type MockLogMockRecorder struct {
	mock *MockLog
}

// NewMockLog creates a new mock instance
func NewMockLog(ctrl *gomock.Controller) *MockLog {
	mock := &MockLog{ctrl: ctrl}
	mock.recorder = &MockLogMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLog) EXPECT() *MockLogMockRecorder {
	return m.recorder
}

// Timestamp mocks base method
func (m *MockLog) Timestamp() time.Time {
	ret := m.ctrl.Call(m, "Timestamp")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Timestamp indicates an expected call of Timestamp
func (mr *MockLogMockRecorder) Timestamp() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timestamp", reflect.TypeOf((*MockLog)(nil).Timestamp))
}

// Resource mocks base method
func (m *MockLog) Resource() string {
	ret := m.ctrl.Call(m, "Resource")
	ret0, _ := ret[0].(string)
	return ret0
}

// Resource indicates an expected call of Resource
func (mr *MockLogMockRecorder) Resource() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resource", reflect.TypeOf((*MockLog)(nil).Resource))
}

// MockLogParser is a mock of LogParser interface
type MockLogParser struct {
	ctrl     *gomock.Controller
	recorder *MockLogParserMockRecorder
}

// MockLogParserMockRecorder is the mock recorder for MockLogParser
type MockLogParserMockRecorder struct {
	mock *MockLogParser
}

// NewMockLogParser creates a new mock instance
func NewMockLogParser(ctrl *gomock.Controller) *MockLogParser {
	mock := &MockLogParser{ctrl: ctrl}
	mock.recorder = &MockLogParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogParser) EXPECT() *MockLogParserMockRecorder {
	return m.recorder
}

// Parse mocks base method
func (m *MockLogParser) Parse(arg0 string) (x.Log, error) {
	ret := m.ctrl.Call(m, "Parse", arg0)
	ret0, _ := ret[0].(x.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockLogParserMockRecorder) Parse(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockLogParser)(nil).Parse), arg0)
}
