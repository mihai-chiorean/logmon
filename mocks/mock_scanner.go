// Code generated by MockGen. DO NOT EDIT.
// Source: monitor/scanner.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	parser "github.com/mihaichiorean/monidog/parser"
	os "os"
	reflect "reflect"
)

// MockSeekReader is a mock of SeekReader interface
type MockSeekReader struct {
	ctrl     *gomock.Controller
	recorder *MockSeekReaderMockRecorder
}

// MockSeekReaderMockRecorder is the mock recorder for MockSeekReader
type MockSeekReaderMockRecorder struct {
	mock *MockSeekReader
}

// NewMockSeekReader creates a new mock instance
func NewMockSeekReader(ctrl *gomock.Controller) *MockSeekReader {
	mock := &MockSeekReader{ctrl: ctrl}
	mock.recorder = &MockSeekReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSeekReader) EXPECT() *MockSeekReaderMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *MockSeekReader) Read(p []byte) (int, error) {
	ret := m.ctrl.Call(m, "Read", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockSeekReaderMockRecorder) Read(p interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSeekReader)(nil).Read), p)
}

// Seek mocks base method
func (m *MockSeekReader) Seek(offset int64, whence int) (int64, error) {
	ret := m.ctrl.Call(m, "Seek", offset, whence)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Seek indicates an expected call of Seek
func (mr *MockSeekReaderMockRecorder) Seek(offset, whence interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seek", reflect.TypeOf((*MockSeekReader)(nil).Seek), offset, whence)
}

// Stat mocks base method
func (m *MockSeekReader) Stat() (os.FileInfo, error) {
	ret := m.ctrl.Call(m, "Stat")
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (mr *MockSeekReaderMockRecorder) Stat() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockSeekReader)(nil).Stat))
}

// MockLogScanner is a mock of LogScanner interface
type MockLogScanner struct {
	ctrl     *gomock.Controller
	recorder *MockLogScannerMockRecorder
}

// MockLogScannerMockRecorder is the mock recorder for MockLogScanner
type MockLogScannerMockRecorder struct {
	mock *MockLogScanner
}

// NewMockLogScanner creates a new mock instance
func NewMockLogScanner(ctrl *gomock.Controller) *MockLogScanner {
	mock := &MockLogScanner{ctrl: ctrl}
	mock.recorder = &MockLogScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogScanner) EXPECT() *MockLogScannerMockRecorder {
	return m.recorder
}

// Subscribe mocks base method
func (m *MockLogScanner) Subscribe() <-chan parser.Log {
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(<-chan parser.Log)
	return ret0
}

// Subscribe indicates an expected call of Subscribe
func (mr *MockLogScannerMockRecorder) Subscribe() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockLogScanner)(nil).Subscribe))
}

// Close mocks base method
func (m *MockLogScanner) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockLogScannerMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogScanner)(nil).Close))
}
